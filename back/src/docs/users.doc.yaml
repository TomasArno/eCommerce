components:
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          description: Email of the user to register 
        name:
          type: string
          description: Name of the user
        photo:
          type: string
          description: Photo of the user
        password:
          type: string
          description: password of the user
        role:
          type: string
          description: role of the user
        isVerified:
          type: boolean
          description: Indicates whether the user is verified
        verifyCode:
          type: string
          description: Code that is sent to the user's email to verify
      required:  
        - email
        - name
        - password
        - isVerified
paths:
  /api/users:
    get:
      summary: Returns the information of all users
      tags:
        - Users
      responses:
        '200':
          description: An array of users
        '404':
          description: Not found any user
    post:
      summary: Creates a new user
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email of the user 
                name:
                  type: string
                  description: Name of the user
                photo:
                  type: string
                  description: Photo of the user
                password:
                  type: string
                  description: password of the user
      responses:
        '201':
          description: User created
  /api/users/{userId}:
    get:
      summary: Returns the information of the requested user
      tags:
        - Users
      responses:
        '200':
          description: Data of the searched user
        '404':
          description: USER NOT FOUND
    put:
      summary: Modify the User information using the indicated ID.
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email of the user to register 
                name:
                  type: string
                  description: Name of the user
                photo:
                  type: string
                  description: Photo of the user
                password:
                  type: string
                  description: password of the user
      responses:
        '200':
          description: User modified
        '401':
          description: Lack of permissions to access
        '404':
          description: USER NOT FOUND
    delete:
      summary: Delete the user using the indicated ID.
      tags:
        - Users
      responses:
        '200':
          description: User Deleted
        '401':
          description: Lack of permissions to access
        '404':
          description: USER NOT FOUND.
  /api/users/premium/{userId}:
    post:
      summary: Perform a role switch; if it is a normal user, it converts it to premium, if it is premium, it converts it to normal.
      tags:
        - Users
      responses:
        '200':
          description: User Modified
        '401':
          description: Lack of permissions to access
        '404':
          description: USER NOT FOUND.